package game.engine;

import game.world.*;
import game.entities.*;
import game.items.*;
import game.obstacles.*;
import game.level.*;
import game.util.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.util.Random;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;

public class GamePanel extends JPanel implements KeyListener, ActionListener {

    // --- ‡∏Ç‡∏ô‡∏≤‡∏î ---
    public static final int TILE  = 32;
    public static final int HUD_H = 92;

    // --- ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏° ---
    private final javax.swing.Timer timer = new javax.swing.Timer(60, this);
    private final Random rng = new Random();
    private final JFrame host;

    // --- ‡∏™‡πÑ‡∏õ‡∏£‡∏ï‡πå ---
    private BufferedImage catImg, fireImg, snowImg, bottleImg, angelImg, giftImg, exitImg;
    private BufferedImage rainbowImg, treeImg;

    // --- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏° ---
    private World world;
    private int currentLevel = 1;
    private boolean gameOver = false, win = false;
    private String message = "";
    private boolean showHelp = false;

    // ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
    private boolean showStart = true;
    private JButton startBtn;

    // ‡πÇ‡∏´‡∏°‡∏î‡∏á‡πà‡∏≤‡∏¢ (Assist)
    private boolean assistMode = true; // << ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å (‡∏Å‡∏î F2 ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ)

    private long msAccumulator = 0;
    // ‡∏Å‡∏±‡∏ô‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ‡∏¢‡∏¥‡∏á‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å‡πÄ‡∏ü‡∏£‡∏°
    private int lastStepX = Integer.MIN_VALUE, lastStepY = Integer.MIN_VALUE;

    public GamePanel(JFrame host){
        this.host = host;
        setFocusable(true);
        setLayout(null);
        addKeyListener(this);
        loadAssets();
        loadLevel(currentLevel);
        createOrPlaceStartButton();
        timer.start();
    }

    // ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    private void loadAssets(){
        catImg    = SpriteLoader.load("assets/innocent.png");
        fireImg   = SpriteLoader.load("assets/angry.png");
        snowImg   = SpriteLoader.load("assets/snowflake.png");
        bottleImg = SpriteLoader.load("assets/bottle.png");
        angelImg  = SpriteLoader.load("assets/angel.png");
        giftImg   = SpriteLoader.load("assets/gift-box.png");
        exitImg   = SpriteLoader.load("assets/photo-book.png");
        rainbowImg= SpriteLoader.load("assets/rainbow.png");
        treeImg   = SpriteLoader.load("assets/tree.png");
    }

    // ‡πÇ‡∏´‡∏•‡∏î‡∏î‡πà‡∏≤‡∏ô
    private void loadLevel(int lv){
        message = "";
        gameOver = false; win = false; showHelp = false; msAccumulator = 0;
        lastStepX = Integer.MIN_VALUE; lastStepY = Integer.MIN_VALUE;

        Level L = Levels.get(lv);
        if (L == null){ gameOver = true; win = true; message = "üéâ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏∏‡∏Å‡∏î‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!"; return; }

        world = new World(exitImg, L.rows, L.cols);

        Dimension pref = new Dimension(world.cols*TILE, world.rows*TILE + HUD_H);
        setPreferredSize(pref); setMinimumSize(pref); setSize(pref);
        if (host != null) host.pack();

        MazeGenerator.generate(world);

        world.player = new Player(1,1, SpriteLoader.scale(catImg, TILE, TILE));
        world.player.hp       = L.startHP;
        world.player.timeLeft = L.timeLimitSec;
        world.player.score    = L.startScore;

        // ---- Assist Mode: ‡∏ö‡∏±‡∏ü‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° ----
        if (assistMode){
            world.player.hp = Math.min(5, world.player.hp + 2);     // +2 HP (‡πÄ‡∏û‡∏î‡∏≤‡∏ô 5)
            world.player.timeLeft += 60;                             // +60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            world.player.shields += 1;                               // ‡πÄ‡∏Å‡∏£‡∏≤‡∏∞‡∏ü‡∏£‡∏µ 1
            world.player.snowflakes += 1;                            // ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏µ‡∏ï‡∏≤‡∏¢ 1
            world.player.rainbows   += 1;                            // ‡∏ß‡∏≤‡∏£‡πå‡∏õ 1
        }

        // ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
        placeItems(new SnowflakeItem(0,0, SpriteLoader.scale(snowImg, TILE, TILE)), L.numSnowflake);
        placeItems(new PotionItem(0,0,     SpriteLoader.scale(bottleImg, TILE, TILE)), L.numPotion);
        placeItems(new AngelWingsItem(0,0, SpriteLoader.scale(angelImg, TILE, TILE)), L.numShield);
        placeItems(new GiftItem(0,0,       SpriteLoader.scale(giftImg, TILE, TILE)), L.numGift);
        placeItems(new RainbowItem(0,0,    SpriteLoader.scale(rainbowImg, TILE, TILE)), L.numRainbow);
        placeItems(new TreeItem(0,0,       SpriteLoader.scale(treeImg,    TILE, TILE)), L.numTree);

        // ‡∏®‡∏±‡∏ï‡∏£‡∏π (‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ Assist)
        addEnemies(Enemy.Color.RED,    L.enemyRed);
        addEnemies(Enemy.Color.BLUE,   L.enemyBlue);
        addEnemies(Enemy.Color.YELLOW, L.enemyYellow);

        // ‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ (‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô + ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ Assist)
        int tTrap  = assistMode ? Math.max(0,(int)Math.floor(L.obstTimeTrap * 0.6)) : L.obstTimeTrap;
        int tSpike = assistMode ? Math.max(0,(int)Math.floor(L.obstSpike    * 0.6)) : L.obstSpike;
        int tCurse = assistMode ? Math.max(0,(int)Math.floor(L.obstCurse    * 0.6)) : L.obstCurse;

        for (int i=0;i<tTrap;i++){
            Point p; do { p = randomFloor(); } while (occupiedByObstacle(p.x,p.y));
            world.obstacles.add(new TimeTrap(p.x,p.y,null));
        }
        for (int i=0;i<tSpike;i++){
            Point p; do { p = randomFloor(); } while (occupiedByObstacle(p.x,p.y));
            world.obstacles.add(new Spike(p.x,p.y,null));
        }
        for (int i=0;i<tCurse;i++){
            Point p; do { p = randomFloor(); } while (occupiedByObstacle(p.x,p.y));
            world.obstacles.add(new CurseTile(p.x,p.y,null));
        }

        // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° Start
        createOrPlaceStartButton();
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏¢‡πâ‡∏≤‡∏¢‡∏õ‡∏∏‡πà‡∏° Start ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠
    private void createOrPlaceStartButton(){
        int W = world.cols*TILE, H = world.rows*TILE;
        int bw = 220, bh = 52;
        int x = (W - bw)/2, y = (H - bh)/2 + 18;

        if (startBtn == null){
            startBtn = new JButton("Start Game");
            startBtn.setFocusPainted(false);
            startBtn.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 18));
            startBtn.setBackground(new Color(255, 180, 60));
            startBtn.setForeground(Color.BLACK); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            startBtn.setOpaque(true);
            startBtn.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(new Color(120,80,20), 2),
                    BorderFactory.createEmptyBorder(6,16,6,16)
            ));
            startBtn.addActionListener(ev -> {
                showStart = false;
                startBtn.setVisible(false);
                requestFocusInWindow();
                message = "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°!";
            });
            add(startBtn);
        }
        startBtn.setBounds(x, y, bw, bh);
        startBtn.setVisible(showStart);
    }

    private void addEnemies(Enemy.Color color, int n){
        // ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÄ‡∏°‡∏∑‡πà‡∏≠ Assist
        int count = assistMode ? Math.max(0, (int)Math.floor(n * 0.6)) : n;
        for(int i=0;i<count;i++){
            Point p = randomFloorAwayFromPlayer(10);
            BufferedImage spr = GfxUtil.tint(SpriteLoader.scale(fireImg, TILE, TILE), color);
            Enemy e = new Enemy(p.x,p.y,color,spr);
            if (assistMode && color==Enemy.Color.RED) e.hp = 1; // RED ‡∏ñ‡∏∂‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á
            world.enemies.add(e);
        }
    }

    private void placeItems(Item proto, int count){
        for(int i=0;i<count;i++){
            Point p = randomFloor();
            Item it = proto.copyAt(p.x, p.y);
            world.items.add(it);
        }
    }

    private Point randomFloor(){
        while(true){
            int x = rng.nextInt(world.cols), y = rng.nextInt(world.rows);
            if (world.passable(x,y) && !world.isExit(x,y)) return new Point(x,y);
        }
    }
    private Point randomFloorAwayFromPlayer(int minManhattan){
        while(true){
            Point p = randomFloor();
            if (Math.abs(p.x-world.player.x)+Math.abs(p.y-world.player.y)>=minManhattan) return p;
        }
    }

    // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    private boolean occupiedByObstacle(int x,int y){
        for (Obstacle ob : world.obstacles) if (ob.x==x && ob.y==y) return true;
        return false;
    }

    // ===== Game Loop =====
    @Override public void actionPerformed(ActionEvent e) {
        // ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ Start ‚Üí ‡∏û‡∏±‡∏Å‡πÄ‡∏Å‡∏°
        if (showStart){ repaint(); return; }

        if (!gameOver && !showHelp){
            moveEnemies();
            checkTileEffects();
            checkCollisions();
            tickTime();
        }
        repaint();
    }

    private void tickTime(){
        msAccumulator += 60;
        if (msAccumulator >= 1000){
            msAccumulator -= 1000;
            if (world.player.timeLeft > 0) world.player.timeLeft--;
            if (world.player.timeLeft <= 0){
                gameOver = true; win = false; message = "‚è≥ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‚Äì Game Over";
            }
        }
    }

    private void moveEnemies(){
        for (Enemy en : world.enemies){
            if (en.isFrozen()) continue;

            // ‡∏ä‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏ô Assist (RED ‡πÄ‡∏î‡∏¥‡∏ô 1/‡πÄ‡∏ü‡∏£‡∏° ‡πÅ‡∏ó‡∏ô 2)
            int speed = (en.color==Enemy.Color.RED?2:1);
            if (assistMode && speed>1) speed = 1;

            for (int s=0;s<speed;s++){
                Point target = en.isLured()? en.lureTarget : new Point(world.player.x, world.player.y);
                int bestX=en.x, bestY=en.y, bestScore=manhattan(en.x,en.y,target.x,target.y);
                int[][] steps={{1,0},{-1,0},{0,1},{0,-1}};
                List<int[]> order = new ArrayList<>(java.util.Arrays.asList(steps));
                Collections.shuffle(order,rng);
                for (int[] d: order){
                    int nx=en.x+d[0], ny=en.y+d[1];
                    if (world.passable(nx,ny)){
                        int sc=manhattan(nx,ny,target.x,target.y);
                        if (sc<bestScore){ bestScore=sc; bestX=nx; bestY=ny; }
                    }
                }
                en.x=bestX; en.y=bestY;
            }
        }
    }
    private int manhattan(int x1,int y1,int x2,int y2){ return Math.abs(x1-x2)+Math.abs(y1-y2); }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô "‡∏Å‡πâ‡∏≤‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤" ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    private void checkTileEffects(){
        if (world.player.x == lastStepX && world.player.y == lastStepY) return;

        for (Obstacle ob : world.obstacles){
            if (ob.x==world.player.x && ob.y==world.player.y){

                // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ‡∏ï‡∏≤‡∏° Assist (‡∏Ñ‡∏∏‡∏°‡πÄ‡∏≠‡∏á ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å onStep ‡πÄ‡∏î‡∏¥‡∏°)
                if (ob instanceof TimeTrap){
                    world.player.timeLeft -= assistMode ? 2 : 5;
                    if (world.player.timeLeft < 0) world.player.timeLeft = 0;
                    message = "‚ö†Ô∏è ‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ -" + (assistMode?2:5) + " ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ";
                } else if (ob instanceof Spike){
                    world.player.hp -= 1; // ‡∏´‡∏ô‡∏≤‡∏°‡∏¢‡∏±‡∏á -1 ‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢
                    message = "‚ö†Ô∏è ‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏ö‡∏´‡∏ô‡∏≤‡∏° -1 HP";
                } else if (ob instanceof CurseTile){
                    world.player.score -= assistMode ? 5 : 10;
                    message = "‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏≤‡∏õ -" + (assistMode?5:10) + " ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô";
                }
            }
        }
        lastStepX = world.player.x; lastStepY = world.player.y;

        if (world.player.hp <= 0){ gameOver = true; win = false; message = "üí• ‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏´‡∏°‡∏î ‚Äì Game Over"; }
    }

    private void checkCollisions(){
        // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
        Iterator<Item> it = world.items.iterator();
        while(it.hasNext()){
            Item item = it.next();
            if (item.x==world.player.x && item.y==world.player.y){
                item.onPickup(world.player, world);
                world.player.score += 5;
                message = pickupMessageFor(item);
                it.remove();
            }
        }
        // ‡∏ä‡∏ô‡∏®‡∏±‡∏ï‡∏£‡∏π
        for (Iterator<Enemy> ei=world.enemies.iterator(); ei.hasNext(); ){
            Enemy en = ei.next();
            if (en.x==world.player.x && en.y==world.player.y){
                if (world.player.shields>0){
                    world.player.shields--; ei.remove(); world.player.score += 10;
                    message = "üõ°Ô∏è ‡πÄ‡∏Å‡∏£‡∏≤‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï! ‡πÑ‡∏ü‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡πÑ‡∏õ";
                }else{
                    world.player.hp--;
                    message = (world.player.hp<=0) ? "üî• ‡πÇ‡∏î‡∏ô‡πÑ‡∏ü‡πÄ‡∏ú‡∏≤ ‚Äì Game Over" : "‡πÄ‡∏à‡πá‡∏ö! HP ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ "+world.player.hp;
                    if (world.player.hp<=0){ gameOver=true; win=false; }
                }
                break;
            }
        }
        // ‡∏ä‡∏ô‡∏∞
        if (!gameOver && world.isExit(world.player.x, world.player.y)){
            world.player.score += world.player.timeLeft;
            currentLevel++; loadLevel(currentLevel);
            message = "üéâ ‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô! ‡πÑ‡∏õ‡∏î‡πà‡∏≤‡∏ô " + currentLevel;
        }
    }

    // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
    private String pickupMessageFor(Item item){
        if (item instanceof SnowflakeItem)   return "‚ùÑÔ∏è ‡πÄ‡∏Å‡πá‡∏ö Snowflake x1 (‡∏Å‡∏î Z ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π)";
        if (item instanceof PotionItem)      return "üß™ ‡πÄ‡∏Å‡πá‡∏ö Potion x1 (‡∏Å‡∏î X ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß)";
        if (item instanceof AngelWingsItem)  return "üëº ‡πÄ‡∏Å‡∏£‡∏≤‡∏∞ +1 (‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)";
        if (item instanceof GiftItem)        return "üéÅ Gift x1 (‡∏Å‡∏î C ‡∏•‡πà‡∏≠‡πÑ‡∏ü‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á)";
        if (item instanceof RainbowItem)     return "üåà Rainbow x1 (‡∏Å‡∏î B ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏õ‡∏£‡∏∞‡∏ï‡∏π)";
        if (item instanceof TreeItem)        return "üå≥ Tree x1 (‡∏Å‡∏î N ‡∏ü‡∏∑‡πâ‡∏ô +1HP ‡πÅ‡∏•‡∏∞ +10s)";
        return "‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°";
    }

    // ===== Input =====
    @Override public void keyPressed(KeyEvent e) {
        // ‡∏´‡∏ô‡πâ‡∏≤ Start: Enter ‡∏Å‡πá‡πÄ‡∏£‡∏¥‡πà‡∏°
        if (showStart && e.getKeyCode()==KeyEvent.VK_ENTER){
            showStart = false;
            if (startBtn != null) startBtn.setVisible(false);
            message = "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°!";
            return;
        }

        // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏•‡πà‡∏ô
        if (e.getKeyCode()==KeyEvent.VK_H){ showHelp=!showHelp; message = showHelp? "üìñ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏•‡πà‡∏ô":"‡∏õ‡∏¥‡∏î‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏•‡πà‡∏ô"; repaint(); return; }
        if (showHelp) return;

        // Toggle ‡πÇ‡∏´‡∏°‡∏î‡∏á‡πà‡∏≤‡∏¢
        if (e.getKeyCode()==KeyEvent.VK_F2){
            assistMode = !assistMode;
            message = "‡πÇ‡∏´‡∏°‡∏î‡∏á‡πà‡∏≤‡∏¢: " + (assistMode? "‡πÄ‡∏õ‡∏¥‡∏î ‚úÖ (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ú‡∏•‡πÄ‡∏ï‡πá‡∏°‡πÜ)":"‡∏õ‡∏¥‡∏î ‚ùå");
            return;
        }

        // ‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î R = ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Start
        if (gameOver && e.getKeyCode()==KeyEvent.VK_R){ currentLevel=1; loadLevel(currentLevel); showStart=true; createOrPlaceStartButton(); return; }

        Player p = world.player;
        int nx=p.x, ny=p.y;
        if (e.getKeyCode()==KeyEvent.VK_LEFT)  nx--;
        if (e.getKeyCode()==KeyEvent.VK_RIGHT) nx++;
        if (e.getKeyCode()==KeyEvent.VK_UP)    ny--;
        if (e.getKeyCode()==KeyEvent.VK_DOWN)  ny++;
        if (world.passable(nx,ny)){ p.x=nx; p.y=ny; }

        if (e.getKeyCode()==KeyEvent.VK_Z) useSnowflake();
        if (e.getKeyCode()==KeyEvent.VK_X) usePotion();
        if (e.getKeyCode()==KeyEvent.VK_C) useGift();
        if (e.getKeyCode()==KeyEvent.VK_B) useRainbow();
        if (e.getKeyCode()==KeyEvent.VK_N) useTree();
        if (e.getKeyCode()==KeyEvent.VK_V) message = hudStatusText();
        if (e.getKeyCode()==KeyEvent.VK_R && !gameOver){ loadLevel(currentLevel); message = "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà"; }
    }

    private void useSnowflake(){
        if (world.player.snowflakes<=0){ message="‡πÑ‡∏°‡πà‡∏°‡∏µ ‚ùÑÔ∏è Snowflake"; return; }
        world.player.snowflakes--;
        int freezeMs = assistMode ? 6000 : 4000;
        for (Enemy en: world.enemies) en.freezeForMillis(freezeMs);
        message="‚ùÑÔ∏è ‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π " + (freezeMs/1000) + " ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ";
    }
    private void usePotion(){
        if (world.player.potions<=0){ message="‡πÑ‡∏°‡πà‡∏°‡∏µ üß™ Potion"; return; }
        world.player.potions--;
        int radius = assistMode ? 2 : 1; // ‡πÇ‡∏î‡∏ô‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ Assist
        List<Enemy> rm = new ArrayList<>();
        for (Enemy en: world.enemies){
            if (Math.abs(en.x-world.player.x)<=radius && Math.abs(en.y-world.player.y)<=radius){
                int dmg = (assistMode && en.color==Enemy.Color.RED) ? 2 : 1;
                en.hp -= dmg;
                if (en.hp<=0){ rm.add(en); world.player.score += 10; }
            }
        }
        world.enemies.removeAll(rm);
        message="üß™ ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß" + (assistMode? " ‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏ß‡πâ‡∏≤‡∏á":"");
    }
    private void useGift(){
        if (world.player.gifts<=0){ message="‡πÑ‡∏°‡πà‡∏°‡∏µ üéÅ Gift"; return; }
        world.player.gifts--;
        Point lure = new Point(world.player.x, world.player.y);
        int ms = assistMode ? 8000 : 5000;
        for (Enemy en: world.enemies)
            if (en.color== Enemy.Color.YELLOW) en.lureTo(lure, ms);
        message="üéÅ ‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡πà‡∏≠ " + (ms/1000) + " ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÑ‡∏ü‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏à‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏°)";
    }
    private void useRainbow(){
        if (world.player.rainbows<=0){ message="‡πÑ‡∏°‡πà‡∏°‡∏µ üåà Rainbow"; return; }
        world.player.rainbows--;
        Point exit = new Point(world.cols-2, world.rows-2);
        int steps = assistMode ? 8 : 6; // ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏Å‡∏•‡∏Ç‡∏∂‡πâ‡∏ô
        int x=world.player.x, y=world.player.y;
        for(int i=0;i<steps;i++){
            int bestX=x, bestY=y, best=manhattan(x,y,exit.x,exit.y);
            int[][] dirs={{1,0},{-1,0},{0,1},{0,-1}};
            for(int[] d: dirs){
                int nx=x+d[0], ny=y+d[1];
                if (world.passable(nx,ny)){
                    int sc=manhattan(nx,ny,exit.x,exit.y);
                    if (sc<best){ best=sc; bestX=nx; bestY=ny; }
                }
            }
            if (bestX==x && bestY==y) break;
            x=bestX; y=bestY;
        }
        world.player.x=x; world.player.y=y;
        message="üåà ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß!";
    }
    private void useTree(){
        if (world.player.trees<=0){ message="‡πÑ‡∏°‡πà‡∏°‡∏µ üå≥ Tree"; return; }
        world.player.trees--;
        world.player.hp = Math.max(1, Math.min(world.player.hp+1, 5));
        world.player.timeLeft += assistMode ? 15 : 10; // ‡∏ü‡∏∑‡πâ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏¢‡∏≠‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢
        message="üå≥ ‡∏ü‡∏∑‡πâ‡∏ô‡∏û‡∏•‡∏±‡∏á +1HP ‡πÅ‡∏•‡∏∞ +" + (assistMode?15:10) + " ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ";
    }

    private String hudStatusText(){
        return String.format(
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏î‡πà‡∏≤‡∏ô %d | HP %d | ‡πÄ‡∏ß‡∏•‡∏≤ %ds | ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô %d | ‚ùÑÔ∏è%d üß™%d üéÅ%d üëº%d üåà%d üå≥%d",
            currentLevel, world.player.hp, world.player.timeLeft, world.player.score,
            world.player.snowflakes, world.player.potions, world.player.gifts, world.player.shields,
            world.player.rainbows, world.player.trees
        );
    }

    // ===== ‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û =====
    @Override protected void paintComponent(Graphics g0){
        super.paintComponent(g0);
        Graphics2D g=(Graphics2D)g0;
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);

        world.draw(g, TILE);

        int hudY = world.rows*TILE;
        drawClearHUD(g, hudY);

        if (showStart) drawStartOverlay(g);
        if (showHelp)  drawHelpOverlay(g);

        if (gameOver){
            g.setColor(new Color(0,0,0,180));
            g.fillRect(0,0,world.cols*TILE,world.rows*TILE);
            g.setColor(Color.WHITE);
            g.setFont(getFont().deriveFont(Font.BOLD, 28f));
            String t = win? "ALL CLEAR!" : "GAME OVER";
            int tw = g.getFontMetrics().stringWidth(t);
            g.drawString(t, (world.cols*TILE - tw)/2, (world.rows*TILE)/2 - 20);
            g.setFont(getFont().deriveFont(16f));
            String tip="‡∏Å‡∏î R ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà";
            g.drawString(tip,(world.cols*TILE-g.getFontMetrics().stringWidth(tip))/2, (world.rows*TILE)/2+10);
        }
    }

    // HUD ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ + ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏°‡∏î‡∏á‡πà‡∏≤‡∏¢
    private void drawClearHUD(Graphics2D g, int hudY){
        int W = world.cols * TILE;
        g.setColor(new Color(18,18,26)); g.fillRect(0, hudY, W, HUD_H);

        g.setColor(Color.WHITE); g.setFont(getFont().deriveFont(14f));
        String line1 = String.format(
            "‡∏î‡πà‡∏≤‡∏ô: %d   |   üíñ HP: %d   |   ‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤: %ds   |   ‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: %d   |   ‡πÇ‡∏´‡∏°‡∏î‡∏á‡πà‡∏≤‡∏¢: %s (F2)",
            currentLevel, world.player.hp, world.player.timeLeft, world.player.score,
            assistMode ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î"
        );
        g.drawString(line1, 12, hudY + 24);

        String line2 = String.format(
            "‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ‚Üí  ‚ùÑÔ∏èZ:%d  üß™X:%d  üéÅC:%d  üëº:%d  üåàB:%d  üå≥N:%d",
            world.player.snowflakes, world.player.potions, world.player.gifts, world.player.shields,
            world.player.rainbows, world.player.trees
        );
        g.drawString(line2, 12, hudY + 46);

        g.setColor(new Color(210,210,255));
        g.drawString(message, 12, hudY + 68);
    }

    // ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
    private void drawStartOverlay(Graphics2D g){
        int W = world.cols * TILE, H = world.rows * TILE;
        g.setColor(new Color(0,0,0,180)); g.fillRect(0, 0, W, H);

        g.setColor(Color.WHITE);
        g.setFont(getFont().deriveFont(Font.BOLD, 32f));
        String title = "Cat in the Pixel Maze";
        int tw = g.getFontMetrics().stringWidth(title);
        g.drawString(title, (W - tw)/2, 100);

        g.setFont(getFont().deriveFont(16f));
        int y = 140, lh = 26;
        String[] lines = {
            "üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏£‡∏π‡∏õ‡∏™‡∏°‡∏∏‡∏î‡∏´‡∏±‡∏ß‡πÉ‡∏à (‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á) ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î",
            "üß≠ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö: ‡∏•‡∏π‡∏Å‡∏®‡∏£ ‚Üê ‚Üë ‚Üí ‚Üì  |  ‚ùÑÔ∏èZ  üß™X  üéÅC  üåàB  üå≥N  üëÄV",
            "üí° ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Start ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô",
            "üü¢ ‡πÇ‡∏´‡∏°‡∏î‡∏á‡πà‡∏≤‡∏¢ (Assist) ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà (‡∏Å‡∏î F2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà)"
        };
        for(String s: lines){ g.drawString(s, (W-600)/2+20, y); y += lh; }

        if (startBtn != null) {
            startBtn.setVisible(true);
            startBtn.repaint();
        }
    }

    private void drawHelpOverlay(Graphics2D g){
        int W = world.cols * TILE, H = world.rows * TILE;
        g.setColor(new Color(0,0,0,190)); g.fillRect(0, 0, W, H);

        g.setColor(Color.WHITE); g.setFont(getFont().deriveFont(Font.BOLD, 24f));
        String title = "‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏•‡πà‡∏ô Cat in the Pixel Maze"; int tw = g.getFontMetrics().stringWidth(title);
        g.drawString(title, (W - tw)/2, 56);

        g.setFont(getFont().deriveFont(16f));
        int y = 90, lh = 26;
        String[] lines = new String[]{
            "üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏£‡∏π‡∏õ‡∏™‡∏°‡∏∏‡∏î‡∏´‡∏±‡∏ß‡πÉ‡∏à (‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á) ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î",
            "üêæ ‡πÄ‡∏î‡∏¥‡∏ô: ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏®‡∏£ ‚Üê ‚Üë ‚Üí ‚Üì",
            "üß∞ ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°: ‚ùÑÔ∏èZ ‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á | üß™X ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß | üéÅC ‡∏•‡πà‡∏≠‡πÑ‡∏ü‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á | üåàB ‡∏ß‡∏≤‡∏£‡πå‡∏õ | üå≥N ‡∏ü‡∏∑‡πâ‡∏ô‡∏û‡∏•‡∏±‡∏á",
            "üî• ‡∏®‡∏±‡∏ï‡∏£‡∏π: üî¥‡πÄ‡∏£‡πá‡∏ß/‡∏ñ‡∏∂‡∏Å  üîµ‡∏ä‡πâ‡∏≤  üü°‡∏´‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡πà‡∏≠",
            "‚ö†Ô∏è ‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ: ‡∏ü‡πâ‡∏≤ -‡πÄ‡∏ß‡∏•‡∏≤ | ‡πÅ‡∏î‡∏á -HP | ‡∏°‡πà‡∏ß‡∏á -‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
            "üí° ‡∏Å‡∏î F2 ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏á‡πà‡∏≤‡∏¢",
            "‡∏õ‡∏¥‡∏î‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏î H ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        };
        for(String s: lines){ g.drawString(s, 36, y); y += lh; }
        g.setColor(new Color(255,160,200)); g.drawRoundRect(24, 64, W-48, y-64, 16, 16);
    }

    @Override public void addNotify(){ super.addNotify(); requestFocusInWindow(); }
    @Override public void keyTyped(KeyEvent e) {}
    @Override public void keyReleased(KeyEvent e) {}
}
